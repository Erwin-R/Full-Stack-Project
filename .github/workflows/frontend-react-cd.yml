name: CD - Deploy React Frontend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - frontend/react/**
jobs:
  #name of job(deploy)
  deploy:
    if: false
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/react

    steps:
      #this clones the whole repository (backend & frontend folder plus files)
      - uses: actions/checkout@v4
      - name: Slack commit message and sha
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":github: ${{github.server_url}}/${{github.repository}}/commit/${{ github.sha }} - ${{ github.event.head_commit.message }}"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Send Slack Message
        # ">" allows you to split one command across multiple lines
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"Deployment started :progress_bar: :fingerscrossed:"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Set Build Number
        #need to give this step id since other steps will refer to it later
        id: build-number
        #The echo command is a way to communicate with your Linux terminal. It allows you to send text, variables, and special characters to the standard output, which is usually the terminal screen. The echo command is like a messenger that delivers your words to the terminal.
        #So we take the build_number variable and put it inside the github_output environment file so that the variable can
        #be accessed as an output from this step. This is how you export a value from any step
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT

        #we must login to docker hub before we can build image
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          #We create secrets with these exact values (i.e DOCKERHUB_USERNAME etc.) within our github repo settings
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Docker Build and push
        run: |
          chmod +x ../../.ci/build-publish.sh
          USERNAME=zer0beans REPO=potatochip-react TAG=${{ steps.build-number.outputs.BUILD_NUMBER }} ../../.ci/build-publish.sh . --build-arg api_base_url=http://full-stack-api-env.eba-iw87wnt8.us-east-2.elasticbeanstalk.com:8080
      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":":docker: Image tag:${{steps.build-number.outputs.BUILD_NUMBER}} pushed to https://hub.docker.com/repository/docker/zer0beans/potatochip-api"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update Dockerrun.aws.json react image tag with new build number
        #add the | to make it to where you can run multiple commands one after another
        run: |
          echo "Dockerrun.aws.json before updating tag"
          cat ../../Dockerrun.aws.json
          sed -i -E 's_(zer0beans/potatochip-react:)([^"]*)_\1'${{steps.build-number.outputs.BUILD_NUMBER}}'_' ../../Dockerrun.aws.json
          echo "Dockerrun.aws.json after updating tag"
          cat ../../Dockerrun.aws.json

      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":":aws: Starting deployment to Elastic Beanstalk"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
          #Github.sha gives you the commit ID that was used to trigger the build
          version_description: ${{github.SHA}}.
          region: ${{ secrets.EB_REGION }}
          #we have to put the full path from root as it does not get the working directory from the default we put above^
          deployment_package: Dockerrun.aws.json
          wait_for_environment_recovery: 60

      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":":githubloading: Committing to repo https://github.com/Erwin-R/Full-Stack-Project/"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Commit and push Dockerrun.aws.json
        #Configuring the username and email to be github-actions and github-actions@github.com respectively (attaching the user to the commit)
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ../../Dockerrun.aws.json 
          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}" 
          git push

      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":"Deployment and commit completed :github-check-mark: :party_blob: - http://full-stack-api-env.eba-iw87wnt8.us-east-2.elasticbeanstalk.com/"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Message
        if: always()
        # ">" allows you to have multiline commands without having to explicitly put "\" for each new line
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":"Job Status ${{ job.status }}"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}
